# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox

import secrets
import hashlib
import sqlite3

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\Program Files\Pos_System\assets\Login")

# Connect to SQLite database
conn = sqlite3.connect('accounts.db')
cursor = conn.cursor()
# Create table if not exists
try:
    # Create the table if it doesn't exist
    cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (
                        username TEXT PRIMARY KEY,
                        salt TEXT,
                        hashed_password TEXT,
                        Loa TEXT)''')
    conn.commit()
except sqlite3.Error as e:
    print("Error occurred while creating the table:", e)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def get_LOA(username):
    hashed_username = hash_username(username)

    cursor.execute("SELECT Loa FROM accounts WHERE username =?", (hashed_username,))
    row = cursor.fetchone()
    if row:
        return row[0]
    else:
        return None


def check_loa(get_loa):
    if get_loa == "Admin":
        import menu_ad
    else:
        import menu_em


def generate_salt():
    salt = secrets.token_hex(16)
    return salt


def hash_password(password, salt):
    salted_password = password + salt
    return hashlib.sha256(salted_password.encode()).hexdigest()


def hash_username(username):
    return hashlib.sha256(username.encode()).hexdigest()


def get_stored_hashed_password(username):
    hashed_username = hash_username(username)
    cursor.execute("SELECT salt, hashed_password FROM accounts WHERE username =?", (hashed_username,))
    row = cursor.fetchone()
    if row:
        return row[0], row[1]
    else:
        return None, None


def check_credentials():
    username = user_entry.get()
    password = pass_entry.get()

    salt, stored_hashed_password = get_stored_hashed_password(username)
    if salt and stored_hashed_password:
        # Hash the password entered during the login attempt with the retrieve salt
        hashed_password = hash_password(password, salt)
        # Compare the hashed passwords
        if hashed_password == stored_hashed_password:
            messagebox.showinfo("Success", "Login successful!")
        else:
            messagebox.showerror("Error", "Incorrect password.")
    else:
        messagebox.showerror("Error", "Username not found.")


def check_username(username):
    hashed_username = hash_username(username)
    count = cursor.execute("SELECT COUNT(*) FROM accounts WHERE username = ?",
                           (hashed_username,))
    count = cursor.fetchone()[0]
    return count > 0


def get_salt(username):
    hashed_username = hash_username(username)
    cursor.execute("SELECT salt FROM accounts WHERE username = ?",
                   (hashed_username,))
    row = cursor.fetchone()
    if row:
        return row[0]
    else:
        return None


def open_menu():
    get_pass = pass_entry.get()
    get_user = pass_entry.get()
    window.destroy()
    check_loa(get_LOA(get_user))


def exit():
    window.destroy()


def save_password(username, password, Loa):
    salt = generate_salt()
    hashed_password = hash_password(password, salt)
    hashed_username = hash_username(username)
    cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (
                    username TEXT PRIMARY KEY,
                    salt TEXT,
                    hashed_password TEXT,
                    Loa TEXT)''')
    conn.commit()


save_password("chevy", "chevy", "admin")

window = Tk()

window.title("Login")
window.geometry("600x400")
window.configure(bg="#FFE1C6")

canvas = Canvas(
    window,
    bg="#FFE1C6",
    height=400,
    width=600,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    300.0,
    84.0,
    image=image_image_1
)

pass_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
pass_bg_1 = canvas.create_image(
    300.5,
    284.0,
    image=pass_image_1
)
pass_entry = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    font=("Hanuman Regular", 24 * -1),
    show="*"
)
pass_entry.place(
    x=119.0,
    y=265.0,
    width=363.0,
    height=36.0,
)

user_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
user_bg_2 = canvas.create_image(
    300.5,
    219.0,
    image=user_image_2
)
user_entry = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    font=("Hanuman Regular", 24 * -1)
)
user_entry.place(
    x=119.0,
    y=200.0,
    width=363.0,
    height=36.0
)

canvas.create_text(
    119.0,
    176.0,
    anchor="nw",
    text="Username",
    fill="#000000",
    font=("Hanuman Regular", 16 * -1)
)

canvas.create_text(
    119.0,
    241.0,
    anchor="nw",
    text="Password",
    fill="#000000",
    font=("Hanuman Regular", 16 * -1)
)

exit_image = PhotoImage(
    file=relative_to_assets("button_1.png"))
exit_ = Button(
    image=exit_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: exit(),
    relief="flat"
)
exit_.place(
    x=349.0,
    y=325.0,
    width=133.0,
    height=37.0
)

login_image = PhotoImage(
    file=relative_to_assets("button_2.png"))
login_ = Button(
    image=login_image,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: open_menu(),
    relief="flat"
)
login_.place(
    x=119.0,
    y=325.0,
    width=133.0,
    height=37.0
)
window.resizable(False, False)
window.mainloop()